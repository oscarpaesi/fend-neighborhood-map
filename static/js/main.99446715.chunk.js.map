{"version":3,"sources":["utils/facebookApi.js","utils/apiKeys.js","data/locations.js","components/Map/Map.js","components/App/App.js","serviceWorker.js","index.js"],"names":["fields","getPlaceInformation","placeId","fetch","concat","locations","id","title","position","lat","lng","MapWrapper","compose","withProps","loadingElement","react_default","a","createElement","containerElement","className","role","tabIndex","mapElement","withScriptjs","withGoogleMap","props","lib","defaultZoom","defaultCenter","map","location","key","Map","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","render","googleMapURL","state","Component","App","componentDidMount","Facebook","then","response","console","log","catch","error","components_Map_Map","Boolean","window","hostname","match","ReactDOM","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.99446715.chunk.js","sourcesContent":["import * as Keys from './apiKeys';\r\n\r\nconst api = 'https://graph.facebook.com/';\r\nconst version = 'v3.2';\r\nconst accessToken = Keys.FB_ACCESS_TOKEN;\r\nconst fields = ['name', 'id', 'about', 'price_range', 'overall_star_rating'];\r\n\r\nexport const getPlaceInformation = (placeId) =>\r\n  fetch(\r\n    `${api}/${version}/${placeId}?fields=${fields}&access_token=${accessToken}`\r\n  );\r\n","export const GOOGLE_MAPS_KEY = \"AIzaSyBXQcVkKfK_5e3ruKK6eufMpYACSCuYx7o\";\r\nexport const FB_APP_ID = \"318542388823429\";\r\nexport const FB_ACCESS_TOKEN = \"318542388823429|qfJlfM8Kqqekmt6Me6nND8JdXRU\";\r\n","export const locations = [\r\n  {id:'l01' ,title: 'Fazenda Barbanegra',         position: {lat: -30.025769, lng: -51.189295}},\r\n  {id:'l02' ,title: 'Le Bateau Ivre',             position: {lat: -30.028217, lng: -51.187401}},\r\n  {id:'l03' ,title: 'O Galo Cinza',               position: {lat: -30.024158, lng: -51.188978}},\r\n  {id:'l04' ,title: 'William & Sons',             position: {lat: -30.029411, lng: -51.189385}},\r\n  {id:'l05' ,title: 'Charlie Brownie',            position: {lat: -30.026026, lng: -51.193150}},\r\n  {id:'l06' ,title: 'Sharin',                     position: {lat: -30.022891, lng: -51.192314}},\r\n  {id:'l07' ,title: 'Ciao Pizzeria Napoletana',   position: {lat: -30.026455, lng: -51.188857}},\r\n  {id:'l08' ,title: 'Zero Sen',                   position: {lat: -30.026493, lng: -51.188950}},\r\n  {id:'l09' ,title: 'Brizza Pizzeria Napoletana', position: {lat: -30.022364, lng: -51.194586}},\r\n  {id:'l10' ,title: 'Fornellone',                 position: {lat: -30.021352, lng: -51.194929}},\r\n  {id:'l11' ,title: 'Sette PastaBar',             position: {lat: -30.021407, lng: -51.190905}},\r\n  {id:'l12' ,title: 'Diego Andino PÃ¢tisserie',    position: {lat: -30.030123, lng: -51.188260}}\r\n];\r\n","import './Map.css';\r\nimport React, { Component } from 'react';\r\nimport { compose, withProps } from 'recompose';\r\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs } from 'react-google-maps';\r\nimport { locations } from '../../data/locations';\r\n\r\nconst MapWrapper = compose(\r\n  withProps({\r\n    loadingElement: (\r\n      <span>It was not possible to load Google Maps.</span>\r\n    ),\r\n    containerElement: (\r\n      <main className=\"map-container\" role=\"application\" tabIndex=\"0\" />\r\n    ),\r\n    mapElement: (\r\n      <div className=\"map\" />\r\n    )\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props =>\r\n  <GoogleMap\r\n    defaultZoom={ 16 }\r\n    defaultCenter={ {lat: -30.02502, lng: -51.191165} } // Center of the neighborhood\r\n  >\r\n    {\r\n      props.locations.map(location =>\r\n        <Marker key={ location.id } position={ location.position } />\r\n      )\r\n    }\r\n  </GoogleMap>\r\n);\r\n\r\nclass Map extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { locations };\r\n  }\r\n\r\n  render = () => {\r\n    const { googleMapURL } = this.props;\r\n    return (\r\n      <MapWrapper\r\n        googleMapURL={ googleMapURL }\r\n        locations={ this.state.locations }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;","import './App.css';\nimport React, { Component } from 'react';\nimport * as Facebook from '../../utils/facebookApi'\nimport * as Keys from '../../utils/apiKeys'\nimport Map from '../Map/Map'\n\nclass App extends Component {\n\n  componentDidMount = () => {\n    Facebook.getPlaceInformation(\"700896006619622\")\n      .then(response => console.log(\"Facebook Query Response\", response))\n      .catch(error => console.log('Facebook Query Error', error));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Map\n          googleMapURL={ `https://maps.googleapis.com/maps/api/js?key=${ Keys.GOOGLE_MAPS_KEY }&v=3` }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// - Use the TripAdvisor API\r\n// https://developer-tripadvisor.com/content-api/\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}